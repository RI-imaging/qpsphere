clone_depth: 256
build: off
notifications:
  - provider: Email
    on_build_success: false
    on_build_failure: false
    on_build_status_changed: false
environment:
  PYPI_PWD: secure: rQ9pez7yeNKlSGNyUQou0l8vR9YU1V9gR0VIcZSZcrKpE10eoquFUc6JKTiYS4fq
  PYPI_USR: release_bot
  PYTHON: "C:\\Python36"
  PYTHON_VERSION: "3.6.x"
  PYTHON_ARCH: "64"

init:
  - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%"

install:
  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - python --version

  # Install dependencies
  - appveyor-retry pip install git+git://github.com/RI-Imaging/qpimage.git
  - appveyor-retry pip install .

  # coverage packages
  - appveyor-retry pip install flake8
  - appveyor-retry pip install pytest codecov coverage

  # Show the installed packages
  - pip freeze

test_script:
  - coverage run --source=qpsphere setup.py test
  - coverage report -m
  - codecov

after_test:
  - appveyor-retry pip install twine wheel
  # Force plat-name to windows because wheel does not know that there
  # are binaries included in the package.
  - appveyor-retry python setup.py sdist bdist_wheel --plat-name win_amd64
  # setup PyPI credentials
  - cmd: "echo [pypi] > %USERPROFILE%\\.pypirc"
  - cmd: "echo username: %PYPI_USR% >> %USERPROFILE%\\.pypirc"
  - cmd: "echo password: %PYPI_PWD% >> %USERPROFILE%\\.pypirc"

artifacts:
  # Archive the generated wheel package in the ci.appveyor.com build report.
  - path: dist\*

on_success:
  - cmd: "if [%APPVEYOR_REPO_TAG%]==[true] twine upload dist\\*.whl"
  - cmd: "if [%APPVEYOR_REPO_TAG%]==[true] twine upload dist\\*.tar.gz"
